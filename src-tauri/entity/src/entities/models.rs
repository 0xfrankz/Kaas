//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14
use async_openai::{config::Config, Client};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

pub enum Providers {
    Azure,
    OpenAI,
    Unknown
}

impl From<&str> for Providers {
    fn from(value: &str) -> Self {
        match value {
            "Azure" => Providers::Azure,
            "OpenAI" => Providers::OpenAI,
            _ => Providers::Unknown
        }
    }
}

impl From<String> for Providers {
    fn from(value: String) -> Self {
        Providers::from(value.as_str())
    }
}

impl From<&String> for Providers {
    fn from(value: &String) -> Self {
        Providers::from(value.as_str())
    }
}

impl Into<String> for Providers {
    fn into(self) -> String {
        match self {
            Providers::Azure => "Azure".to_owned(),
            Providers::OpenAI => "OpenAI".to_owned(),
            _ => "Unknown".to_owned()
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "models")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub provider: String,
    pub config: String,
    #[serde(skip_deserializing)]
    pub created_at: DateTimeLocal,
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(skip_deserializing)]
    pub updated_at: Option<DateTimeLocal>,
    #[serde(skip_deserializing)]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<DateTimeLocal>,
}

impl Model {
    pub fn get_config<C: Config>(&self) -> Option<C> {
        None
    }
    pub fn get_client<C: Config>(&self) -> Option<Client<C>> {
        None
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::conversations::Entity")]
    Conversations,
}

impl Related<super::conversations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Conversations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
