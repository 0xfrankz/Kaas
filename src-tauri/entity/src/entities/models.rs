//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14
use async_openai::{config::Config, Client};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "models")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub provider: String,
    pub config: String,
    #[serde(skip_deserializing)]
    pub created_at: DateTimeLocal,
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(skip_deserializing)]
    pub updated_at: Option<DateTimeLocal>,
    #[serde(skip_deserializing)]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<DateTimeLocal>,
}

impl Model {
    pub fn get_config<C: Config>(&self) -> Option<C> {
        None
    }
    pub fn get_client<C: Config>(&self) -> Option<Client<C>> {
        None
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::conversations::Entity")]
    Conversations,
}

impl Related<super::conversations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Conversations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// impl From<HashMap<String, String>> for Model {
//     fn from(map: HashMap<String, String>) -> Self {
//         let provider = map.get(&String::from("provider")).unwrap_or(&String::default()).as_str();
//         let api_key = map.get(&String::from("apiKey")).unwrap_or(&String::default());
//         let endpoint = map.get(&String::from("endpoint")).unwrap_or(&String::default());
//         let deployment_id = map.get(&String::from("deploymentId")).unwrap_or(&String::default());

//         let config_str: String = match provider {
//             "Azure" => {
//                 serde_json::to_string(&HashMap::from([
//                     ("apiKey", api_key),
//                     ("endpoint", endpoint),
//                     ("deploymentId", deployment_id)
//                 ])).unwrap_or(String::default())
//             },
//             _ => String::default()
//         };
//         Self {
//             id: map.get(&String::from("id")).unwrap_or(&String::from("-1")).parse().unwrap_or(-1),
//             provider: provider.to_owned(),
//             config: config_str,
//             created_at: DateTime::parse_from_rfc3339(map.get(&String::from("id")).unwrap_or(&String::default())).unwrap_or(DateTime::default())
//         }
//         // let provider = map.get("provider").unwrap().to_string();
//         // let config = map.get("config").unwrap().to_string();
//         // let created_at = DateTimeLocal::from_utc(
//         //     chrono::NaiveDateTime::from_timestamp(0, 0),
//         //     chrono::Utc,
//         // );
//         // let updated_at = map.get("updated_at").map()
//     }
// }

// #[derive(Clone, Debug, Serialize)]
// #[serde(rename_all = "camelCase")]
// pub enum ModelOutput {
//     AzureModelOutput {
//         id: i32,
//         provider: String,
//         api_key: String,
//         endpoint: String,
//         deployment_id: String,
//         created_at: DateTimeLocal,
//         #[serde(skip_serializing_if = "Option::is_none")]
//         updated_at: Option<DateTimeLocal>,
//         #[serde(skip_serializing_if = "Option::is_none")]
//         deleted_at: Option<DateTimeLocal>,
//     },
// }

// #[derive(Clone, Debug, Serialize)]
// pub struct AzureModelOutput {
//     pub id: i32,
//     pub provider: String,
//     pub api_key: String,
//     pub endpoint: String,
//     pub deployment_id: String,
//     pub created_at: DateTimeLocal,
//     #[serde(skip_serializing_if = "Option::is_none")]
//     pub updated_at: Option<DateTimeLocal>,
//     #[serde(skip_serializing_if = "Option::is_none")]
//     pub deleted_at: Option<DateTimeLocal>,
// }

// impl From<Model> for ModelOutput {
//     fn from(value: Model) -> Self {
//         let config_map: HashMap<String, String> =
//             serde_json::from_str(&value.config).unwrap_or(HashMap::new());
//         info!("config_map: {:?}", config_map);
//         ModelOutput::AzureModelOutput {
//             id: value.id,
//             provider: value.provider,
//             api_key: config_map.get(&String::from("apiKey")).unwrap_or(&String::default()).to_owned(),
//             endpoint: config_map.get(&String::from("endpoint")).unwrap_or(&String::default()).to_owned(),
//             deployment_id: config_map.get(&String::from("deploymentId")).unwrap_or(&String::default()).to_owned(),
//             created_at: value.created_at,
//             updated_at: value.updated_at,
//             deleted_at: value.deleted_at,
//         }
//     }
// }
