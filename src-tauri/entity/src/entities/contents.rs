//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::{
    entity::prelude::*,
    ActiveValue::{self, NotSet},
    IntoActiveModel,
};
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};

#[derive(
    Clone,
    Default,
    Debug,
    PartialEq,
    EnumIter,
    DeriveActiveEnum,
    Eq,
    Serialize_repr,
    Deserialize_repr,
)]
#[sea_orm(rs_type = "u8", db_type = "TinyUnsigned")]
#[repr(u8)]
pub enum ContentType {
    #[sea_orm(num_value = 0)]
    #[default]
    Text = 0,
    #[sea_orm(num_value = 1)]
    Image = 1,
}

#[derive(Clone, Default, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "contents")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[serde(skip_deserializing)]
    pub message_id: i32,
    pub r#type: ContentType,
    #[serde(skip_deserializing)]
    pub mimetype: Option<String>,
    pub data: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::messages::Entity",
        from = "Column::MessageId",
        to = "super::messages::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Messages,
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct ContentDTO {
    pub r#type: ContentType,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub mimetype: Option<String>,
    pub data: String,
}

impl IntoActiveModel<ActiveModel> for ContentDTO {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            id: NotSet,
            message_id: NotSet,
            r#type: ActiveValue::Set(self.r#type),
            mimetype: ActiveValue::Set(self.mimetype),
            data: ActiveValue::Set(self.data),
        }
    }
}

impl From<Model> for ContentDTO {
    fn from(value: Model) -> Self {
        ContentDTO {
            r#type: value.r#type,
            mimetype: value.mimetype,
            data: value.data,
        }
    }
}
