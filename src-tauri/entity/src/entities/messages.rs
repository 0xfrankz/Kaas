//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use sea_orm::entity::Linked;
use sea_orm::ActiveValue;
use sea_orm::FromJsonQueryResult;
use sea_orm::IntoActiveModel;
use sea_orm::IntoActiveValue;
use serde::{Deserialize, Serialize};

pub enum Roles {
    User,
    Bot,
    System,
}

impl Into<i32> for Roles {
    fn into(self) -> i32 {
        match self {
            Roles::User => 0,
            Roles::Bot => 1,
            Roles::System => 2,
        }
    }
}

impl From<i32> for Roles {
    fn from(value: i32) -> Self {
        match value {
            0 => Roles::User,
            1 => Roles::Bot,
            2 => Roles::System,
            _ => panic!("Invalid role"),
        }
    }
}

#[derive(Clone, Default, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "messages")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub conversation_id: i32,
    pub role: i32,
    pub content: ContentItemList,
    #[serde(skip_deserializing)]
    pub created_at: DateTimeLocal,
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(skip_deserializing)]
    pub updated_at: Option<DateTimeLocal>,
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(skip_deserializing)]
    pub deleted_at: Option<DateTimeLocal>,
}

#[derive(Clone, Default, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
pub struct ContentItemList {
    pub items: Vec<ContentItem>
}

impl ContentItemList {
    pub fn new(item: ContentItem) -> Self {
        ContentItemList {
            items: vec![item]
        }
    }
}

impl IntoActiveValue<String> for ContentItemList {
    fn into_active_value(self) -> ActiveValue<String> {
        ActiveValue::Set(serde_json::to_string(&self).unwrap_or(String::default()))
    }
}

#[derive(Clone, Default, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
pub struct ContentItem {
    pub r#type: String,
    pub data: String
}

impl ContentItem {
    pub fn text(text: String) -> Self {
        ContentItem {
            r#type: "text".to_string(),
            data: text
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::conversations::Entity",
        from = "Column::ConversationId",
        to = "super::conversations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Conversations,
}

impl Related<super::conversations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Conversations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

/**
 * Relation link from Message to Model
 */
pub struct MessageToModel;

impl Linked for MessageToModel {
    type FromEntity = Entity;
    type ToEntity = super::models::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![
            Relation::Conversations.def(),
            super::conversations::Relation::Models.def(),
        ]
    }
}

#[derive(Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct NewMessage {
    pub conversation_id: i32,
    pub role: i32,
    pub content: ContentItemList,
}

impl IntoActiveModel<ActiveModel> for NewMessage {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            conversation_id: ActiveValue::Set(self.conversation_id),
            role: ActiveValue::Set(self.role),
            content: ActiveValue::Set(self.content),
            ..Default::default()
        }
    }
}